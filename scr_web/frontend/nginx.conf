server {
    listen 80;
    server_name _;

    # Logging settings
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    # Security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com; img-src 'self' data:; font-src 'self' https://cdnjs.cloudflare.com; connect-src 'self' http://localhost:8000 http://localhost http://host.docker.internal:8000 http://backend:8000";
    add_header Referrer-Policy "strict-origin-when-cross-origin";

    # Serve static files (frontend)
    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html; # Support client-side routing

        # Disable caching for HTML files to ensure fresh content
        add_header Cache-Control "no-cache";

        # Prevent automatic refresh
        expires -1;

        # Enable caching only for assets, not HTML
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1d;
            add_header Cache-Control "public, max-age=86400";
        }
    }

    # Handle login page
    location = /login {
        alias /usr/share/nginx/html;
        try_files /login.html /index.html;
    }

    # Handle login/ path
    location = /login/ {
        return 301 /login;
    }

    # Handle register page
    location = /register {
        alias /usr/share/nginx/html;
        try_files /register.html /index.html;
    }

    # Handle register/ path
    location = /register/ {
        return 301 /register;
    }

    # Handle chat page
    location = /chat {
        alias /usr/share/nginx/html;
        try_files /chat.html /index.html;
    }

    # Handle tire page
    location = /tire {
        alias /usr/share/nginx/html;
        try_files /tire.html /index.html;
    }

    # Handle maintenance page
    location = /maintenance {
        alias /usr/share/nginx/html;
        try_files /maintenance.html /index.html;
    }

    # Handle verify-email page
    location = /verify-email {
        alias /usr/share/nginx/html;
        try_files /verify-email.html /index.html;
    }

    # Handle admin page
    location = /admin {
        alias /usr/share/nginx/html;
        try_files /admin.html /index.html;
    }

    # Handle auth-success page
    location = /auth-success {
        alias /usr/share/nginx/html;
        try_files /auth-success.html /index.html;
    }

    # Proxy API requests to the backend service
    location /api/ {
        # Use the correct backend service name and port from docker-compose
        proxy_pass http://backend:8000/api/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "keep-alive";
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 8 8k;

        # Add CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # Handle errors
        proxy_intercept_errors on;
        error_page 500 502 503 504 /50x.html;
    }

    # Serve styles with appropriate caching but allow for refreshing
    location /styles/ {
        alias /usr/share/nginx/html/styles/;
        expires 1h;
        add_header Cache-Control "public, max-age=3600";
        add_header Vary "Accept-Encoding";
    }

    # Serve scripts with appropriate caching but allow for refreshing
    location /scripts/ {
        alias /usr/share/nginx/html/scripts/;
        expires 1h;
        add_header Cache-Control "public, max-age=3600";
        add_header Vary "Accept-Encoding";
    }

    # Serve assets with appropriate caching
    location /assets/ {
        alias /usr/share/nginx/html/assets/;
        expires 1d;
        add_header Cache-Control "public, max-age=86400";
        add_header Vary "Accept-Encoding";
    }

    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }

    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }

    # Health check endpoint
    location = /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'OK';
    }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}
